
1) dodanie aplikacji P08ShopWebApp.Client typu razor pages 

- dodanie strony calculator (idenyfikacja ró¿nic ¿adañ typu GET i POST)
- dodanie strony CalcualtorBinding (uzycie mechanizmu bindowania danych z formualrza do modelu)

2) uzycie mechnianizmu Scaffolding do zmapowania bazy danych na klasy (podejœcie databse first)

- scaffolding
	polecenie: 
	dotnet ef dbcontext scaffold "Data Source=(localdb)\\mssqllocaldb;Initial Catalog=mysupershop;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models --context-dir Data --context ShopContext --force

	dotnet ef dbcontext scaffold "name=AzureDBConnection" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models --context-dir Data --context ShopContext --force
	(ten sposób pobiera connection string z appssettings ale uwaga! nie widzi Secrets.json 
	mozna to obejœæ: https://stackoverflow.com/questions/58816298/using-scaffold-dbcontext-with-user-secrets)


	wykonuje mapwanie ale zeby zadzia³o to upoewniamy sie ze mamy zainsalowany dotnet ef 
	dotnet tool install --global dotnet-ef --version 8.0.0  (opcjonalnie podajemy wersje jesli nie mamy zainstalowanej najnowszej wersji core)

	potrzebujemy jeszcze dotnet add package Microsoft.EntityFrameworkCore.Design

	oraz add package Microsoft.EntityFrameworkCore.SqlServer

- dodalismy recznie wyswietlanie listy produktów

- uzylismy wbudowane w visual studio scaffoldingu do wygenerowania automatycznego widków razor CRUD 

3) Tworzymy aplikacjê MVC 

 - podstawy komunikacji kontroler-vidok-model - calculator i newCalculator
 - zrobilismy scaffoling bazy (wczesniej skopiowaliœmy z csproj paczki potrzebne do scaffoldingu)
 - robimy scaffolding kodu 
   - najpierw musimy zainstalowaæ: dotnet tool install -g dotnet-aspnet-codegenerator
   - generujemy automatycznie gotowy kontroler typu CRUD :
     dotnet aspnet-codegenerator controller -name ProductsController -m Product -dc ShopContext --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries


4) Tworzymy nowy aplikacje MVC - ale tym razem bedzie ona korzystac z api 
 - najpierw zrobilismy scaffolding bazy 
 - potem na podstawie utworzonego datacontextu zrobilsimy scaffolding kodu (zrobienie CRUD controlera)
 - potem przenieslismy ProductServiceDoShared -> zeby korzysta³ z niego klient WPF oraz klient MVC 
 - wstrzyklenlismy w program.cs konfiguracje serwisów oraz pobralismy konfiguracje AppSetings z appsetings.json, która zawiera adresy endpointów 
 - podmieniliœmy wgyenerowane metody na metody, które komunikuja sie z API zamist bazy danych 


 tryb: 